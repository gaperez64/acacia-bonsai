# rerun benchmarking for all relevant configurations
rm -rf build_*; rm -rf _bm-logs
./self-benchmark.sh -c best_downset_vector_or_kdtree,best_downset_kdtree,best_downset_vector,best_downset_vector_simd -b ab/syntcomp21/0s-20s -t 2
rm -rf mkplottable; mkdir mkplottable
# read JSON logs and turn them to something the cactus-plot script can use
for f in _bm-logs/*.json; do ./doc/benchmarks/meson-to-mkplot.sh $(basename $f) $f > mkplottable/$(basename $f); done
../mkplot/mkplot.py --lloc='lower right' --ymin=1e-1 --ymax=1e2 --xmax=90 --ylog -b pdf --save-to=plot.pdf mkplottable/*.json

# run benchmarking with test information about antichain sizes
rm -rf build_*; rm -rf _bm-logs
# you'll have to modify self benchmark to add from the opts
# -DAC_DATA
./self-benchmark.sh -c best_downset_vector_or_kdtree -b ab/syntcomp21/0s-20s -t 2
# the result can be processed using the following to get a graph
# with the distribution of antichain sizes and dimensions
doc/cav24/antichains.py _bm-logs/best_downset_vector_or_kdtree.json

# focus on the friendly benchmarks
for f in _bm-logs/*.json; do grep -E "Alarm_06e9cad4|Alarm_68c86764|Alarm_70523fbe|Alarm_f2774e0b|amba_decomposed_arbiter5|amba_decomposed_arbiter6|amba_decomposed_arbiter7|ltl2dpa19|OneCounterGuiA9|OneCounter|tmp_13cfc6f2" $f > "${f}2"; done
for f in _bm-logs/*.json2; do ./doc/benchmarks/meson-to-mkplot.sh $(basename $f) $f > mkplottable/$(basename $f); done
doc/cav24/friendly.py mkplottable

