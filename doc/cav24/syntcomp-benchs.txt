# rerun benchmarking for all relevant configurations
rm -rf build_*; rm -rf _bm-logs
./self-benchmark.sh -c downset_vector,downset_kdtree,downset_vector_or_kdtree
rm -rf mkplottable; mkdir mkplottable
# read JSON logs and turn them to something the cactus-plot script can use
for f in _bm-logs/*.json; do ./doc/benchmarks/meson-to-mkplot.sh $(basename $f) $f > mkplottable/$(basename $f); done
../mkplot/mkplot.py --lloc='upper left' --ymin=1e-2 --ylog -b pdf --save-to=plot.pdf mkplottable/*.json

# run benchmarking with test information about antichain sizes
rm -rf build_*; rm -rf _bm-logs
# you'll have to modify self benchmark to add from the opts
# -DAC_DATA
./self-benchmark.sh -c downset_vector_or_kdtree
# the result can be processed using the following to get a graph
# with the distribution of antichain sizes and dimensions
doc/cav24/antichains.py _bm-logs/downset_vector_or_kdtree.json

# focus on the friendly benchmarks
for f in _bm-logs/*.json; do grep -E "amba_case_study2|full_arbiter_unreal24|Lights2_06e9cad4|Lights2_0f5381e9|Lights2_9cac58d3|Lights2_b02056d6|OneCounterGuiA5|OneCounterGuiA6|OneCounterGuiA7|prioritized_arbiter6" $f > "${f}2"; done
for f in _bm-logs/*.json2; do ./doc/benchmarks/meson-to-mkplot.sh $(basename $f) $f > mkplottable/$(basename $f); done
doc/cav24/friendly.py mkplottable

