# rerun benchmarking for all relevant configurations
rm -rf build_*; rm -rf _bm-logs
./self-benchmark.sh -c downset_vector,downset_kdtree,downset_vector_or_kdtree
rm -rf mkplottable; mkdir mkplottable
# read JSON logs and turn them to something the cactus-plot script can use
for f in _bm-logs/*.json; do ./doc/benchmarks/meson-to-mkplot.sh $(basename $f) $f > mkplottable/$(basename $f); done
../mkplot/mkplot.py --lloc='upper left' --ymin=1e-2 --ylog -b pdf --save-to=plot.pdf mkplottable/*.json

# run benchmarking with test information about antichain sizes
rm -rf build_*; rm -rf _bm-logs
# you'll have to modify self benchmark to add from the opts
# -DAC_DATA
./self-benchmark.sh -c downset_vector_or_kdtree
# the result can be processed using the following to get a graph
# with the distribution of antichain sizes and dimensions
doc/cav24/antichains.py _bm-logs/downset_vector_or_kdtree.json
