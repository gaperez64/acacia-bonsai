INFO {
  TITLE:       "Prioritized Arbiter (binary encoded version)"
  DESCRIPTION: "This variant of the prioritized arbiter avoids the linear rise
in the number of inputs with increasing number of clients. To this
end, a client request is encoded in binary using only logarithmically
many bits. This way only one request can be made per time step, which
is answerd by a respective binary encoded grant the same way. As a
consequence, without further restrictions, every request could be
answered immediately. Hence, to complicate the situation again, the
output player is forced to repeate the same grant for one time step
once at a while. This way, it can be possible for the input player to
open multiple requests faster than they can be answered."
  SEMANTICS:   Mealy
  TARGET:      Mealy
}

GLOBAL {
  PARAMETERS {
    n = 6;
  }

  DEFINITIONS {
    /* Checks whether a bus of size log(n) currently represents
     * the numerical value v (encoded in binary).
     */
    value(bus,v) = value'(bus,v,0,SIZEOF bus);
    value'(bus,v,i,j) =
      i >= j        : true
      bit(v,i) == 1 : value'(bus,v,i + 1,j) &&  bus[i]
      otherwise    : value'(bus,v,i + 1,j) && !bus[i];

    /* Returns the i-th bit of the numerical value v.
     */
    bit(v,i) =
      i <= 0     : v % 2
      otherwise : bit(v / 2,i - 1);

    /* Discrete logarithm.
     */
    log2(x) =
      x <= 1     : 1
      otherwise : 1 + log2(x / 2);
  }
}

MAIN {

  INPUTS {
    // using the encoded value of 0 as the master grant
    request[log2(n)];
  }

  OUTPUTS {
    // allow one more value in the outputs indicating no selected
    // grant
    grant[log2(n+1)];
  }

  ASSUMPTIONS {
    // The master cannot starve the others
    G F (||[0 <= i < log2(n)] request[i]);
  }

  INVARIANTS {
    // every request is eventually granted
    &&[0 < i <= n]
      (value(request, i) -> F value(grant, i));

    // a master request is granted before any other request
    G (value(request, 0) -> X (&&[0 < i <= n] ! value(grant, i) U value(grant, 0)));
  }

  GUARANTEE {
    // sometimes there has to be a delay to allow requests to be
    // produced faster that they can be granted.
    G F (&&[0 <= i < log2(n-1)] (grant[i] <-> X grant[i]));
  }
}

//#!SYNTCOMP
//STATUS : realizable
//REF_SIZE : -1
//#.
